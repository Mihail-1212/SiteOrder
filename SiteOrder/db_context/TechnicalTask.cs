//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SiteOrder.db_context
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TechnicalTask
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public TechnicalTask()
        {
            this.Demand = new HashSet<Demand>();
            this.Logbook = new HashSet<Logbook>();
        }
    
        public int id { get; set; }
        public string name { get; set; }
        public string status { get; set; }
        public System.DateTime createDatetime { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Demand> Demand { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Logbook> Logbook { get; set; }

        public TechnicalTask_status Status
        {
            get
            {
                if (status == null)
                {
                    return TechnicalTask_status.processing;
                }

                TechnicalTask_status resultStatus = TechnicalTask_status.canceled;

                var @switch = new Dictionary<string, Action> {
                    { nameof(TechnicalTask_status.completed), () => resultStatus = TechnicalTask_status.completed },
                    { nameof(TechnicalTask_status.canceled), () => resultStatus = TechnicalTask_status.canceled },
                    { nameof(TechnicalTask_status.processing), () => resultStatus = TechnicalTask_status.processing }
                    };

                @switch[status]();
                return resultStatus;
            }
            set
            {
                status = value.ToString();
            }
        }

        public User Customer
        {
            get
            {
                var @return = Logbook.ToList().Where(v => v.userType == nameof(Logbook_userType.customer)).Select(v => v.User).FirstOrDefault();
                return @return;
            }
        }
    }
}
