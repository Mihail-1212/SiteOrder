//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SiteOrder.db_context
{
    using SiteOrder.helper;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;

    public partial class User : INotifyPropertyChanged
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public User()
        {
            this.Logbook = new HashSet<Logbook>();
        }
    
        public string login { get; set; }
        public string password { get; set; }
        public string surname { get; set; }
        public string name { get; set; }
        public string patronymic { get; set; }
        public bool isAdministrator { get; set; }
        public string photo { get; set; }
        public string email { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Logbook> Logbook { get; set; }

        public String Email
        {
            get
            {
                if (email == null || String.IsNullOrWhiteSpace(email))
                    return "Эл. почта не указана";
                return email;
            }
        }

        public String Photo
        {
            get
            {
                if (photo == null || !System.IO.File.Exists(photo))
                    return "Фотография не выбрана!";
                return photo;
            }
            set
            {
                photo = value;
                NotifyPropertyChanged();
            }
        }

        public override String ToString()
        {
            return $"{Helper.FirstCharToUpper(surname)} {Helper.FirstCharToUpper(name)} {Helper.FirstCharToUpper(patronymic, false)}";
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void NotifyPropertyChanged([CallerMemberName] String propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
